// File: graph_binary.cpp
// -- graph handling source
//-----------------------------------------------------------------------------
// Community detection 
// Based on the article "Fast unfolding of community hierarchies in large networks"
// Copyright (C) 2008 V. Blondel, J.-L. Guillaume, R. Lambiotte, E. Lefebvre
//
// This program must not be distributed without agreement of the above mentionned authors.
//-----------------------------------------------------------------------------
// Author   : E. Lefebvre, adapted by J.-L. Guillaume
// Email    : jean-loup.guillaume@lip6.fr
// Location : Paris, France
// Time	    : February 2008
//-----------------------------------------------------------------------------
// see readme.txt for more details

#include <sys/mman.h>
#include <fstream>
#include<sstream>
#include <string>
#include <stack>
#include <set>
#include<string.h>
#include "../include/graph_binary.h"
#include "math.h"

Graph::Graph() {
  nb_nodes     = 0;
  nb_links_out     = 0;
  nb_links_in     = 0;
  total_weight = 0;
  total_weight_in = 0;
  total_weight_out = 0;
}

Graph::Graph(char *filename, char *filename_w, int type) {
  ifstream finput;
  finput.open(filename,fstream::in | fstream::binary);
  
  // Read number of nodes on 4 bytes
  finput.read((char *)&nb_nodes, 4);
  assert(finput.rdstate() == ios::goodbit);

  // Read cumulative out degree sequence: 8 bytes for each node
  // cum_degree[0]=degree(0); cum_degree[1]=degree(0)+degree(1), etc.
  degrees_out.resize(nb_nodes);
  finput.read((char *)&degrees_out[0], nb_nodes*4);
  
  // Read cumulative in degree sequence: 8 bytes for each node
  // cum_degree[0]=degree(0); cum_degree[1]=degree(0)+degree(1), etc.
  degrees_in.resize(nb_nodes);
<<<<<<< .mine
  finput.read((char *)&degrees_in[0], nb_nodes*4);
  
  // Read correspondance of labels
  correspondance.resize(nb_nodes);
=======
  finput.read((char *)&degrees_in[0], nb_nodes*8);
  
  // Read correspondance of labels
  correspondance.resize(nb_nodes);
>>>>>>> .r98
  finput.read((char *)(&correspondance[0]), nb_nodes*4); 

  // Read links_out: 4 bytes for each link 
  nb_links_out=degrees_out[nb_nodes-1];
  links.resize(nb_links_out);
<<<<<<< .mine
  finput.read((char *)(&links[0]), nb_links_out*4); 
=======
  finput.read((char *)(&links[0]), (long)nb_links_out*4); 
>>>>>>> .r98
  
  
  // Read links_in: 4 bytes for each link 
  nb_links_in=degrees_in[nb_nodes-1];
  links_in.resize(nb_links_in);
<<<<<<< .mine
  finput.read((char *)(&links_in[0]), nb_links_in*4); 
  
=======
  finput.read((char *)(&links_in[0]), (long)nb_links_in*4); 
  
>>>>>>> .r98
  // IF WEIGHTED : read weights: 4 bytes for each link (each link is counted twice)
  weights.resize(0);
  total_weight=0;
  if (type==WEIGHTED) {
    ifstream finput_w;
    finput_w.open(filename_w,fstream::in | fstream::binary);
    weights.resize(nb_links_out);
    finput_w.read((char *)&weights[0], nb_links_out*4);  
  }    

  // Compute total weight
  for (unsigned int i=0 ; i<nb_nodes ; i++) {
    total_weight_in = (double)in_weighted_degree(i);
    total_weight_out = (double)out_weighted_degree(i);
    total_weight += (double)weighted_degree(i);
  }
}

Graph::Graph(int n, int m, double t, int *d, int *l, float *w) {
/*  nb_nodes     = n;
  nb_links     = m;
  total_weight = t;
  degrees_out      = d;
  links        = l;
  weights      = w;*/
}

void
Graph::display() {
/*  for (unsigned int node=0 ; node<nb_nodes ; node++) {
    pair<vector<unsigned int>::iterator, vector<float>::iterator > p = neighbors(node);
    for (unsigned int i=0 ; i<nb_neighbors_out(node) ; i++) {
      if (node<=*(p.first+i)) {
	if (weights.size()!=0)
	  cout << node << " " << *(p.first+i) << " " << *(p.second+i) << endl;
	else
	  cout << node << " " << *(p.first+i) << endl;
      }
    }   
  }*/
  for (unsigned int node=0 ; node<nb_nodes ; node++) {
    pair<vector<unsigned int>::iterator, vector<float>::iterator > p = neighbors(node);
    cout << correspondance[node] << ":" ;
    for (unsigned int i=0 ; i<nb_neighbors_out(node) ; i++) {
      if (true) {
	if (weights.size()!=0)
	  cout << " (" << correspondance[*(p.first+i)] << " " << *(p.second+i) << ")";
	else
	  cout << " " << correspondance[*(p.first+i)];
      }
    }
    cout << endl;
  }
}

/* Methode de reecriture du fichier */ 
void
Graph::writeFile(string outNeighbors, string inNeighbors) {

	ofstream foutput;
	foutput.open(outNeighbors.c_str() ,fstream::out | fstream::binary);
	
	cout << "Nombre de noeuds : " << nb_nodes << endl; 

	/* On recupere les voisins sortants */ 
	for(unsigned int node=0; node < nb_nodes; node++) {
	
		pair<vector<unsigned int>::iterator, vector<float>::iterator > p = neighbors(node);
	
		for(unsigned int i = 0; i < nb_neighbors_out(node); i++) {
			
			foutput << correspondance[node] << " " << correspondance[*(p.first+i)] << endl;
			
		}

	}

	foutput.close();

	ofstream foutputIn;
        foutputIn.open(inNeighbors.c_str(), fstream::out | fstream::binary);

	/* On recupere les voisins entrants */
	for(unsigned int node=0; node < nb_nodes; node++) {
	
		pair<vector<unsigned int>::iterator, vector<float>::iterator > p1 = in_neighbors(node);

		for(unsigned int i = 0; i < nb_neighbors_in(node); i++) {

				foutputIn << correspondance[node] << " " << correspondance[*(p1.first+i)] << endl;
		
		}

	}

}

void 
Graph::computeOverlap(string fileName) {

	ofstream foutput; 
	foutput.open(fileName.c_str(), fstream::out | fstream::binary);

	for(unsigned int node = 0; node < nb_nodes; node++) {

		int deg;

		if(node == 0) deg = 0; else deg = node - 1;

		unsigned int* outNeighbors = &links[degrees_out[deg]];
		unsigned int* inNeighbors = &links_in[degrees_in[deg]];

		vector<int>* inter = NULL; 
		inter = new vector<int>(max(nb_neighbors_out(node), nb_neighbors_in(node)));
		vector<int>::iterator it;

		sort(outNeighbors, outNeighbors + nb_neighbors_out(node));
		sort(inNeighbors, inNeighbors + nb_neighbors_in(node));

		it = set_intersection(outNeighbors, outNeighbors + nb_neighbors_out(node), inNeighbors, inNeighbors + nb_neighbors_in(node), (*inter).begin());
		(*inter).resize(it-(*inter).begin());

		float overlap;

		if(nb_neighbors_out(node) == 0 || nb_neighbors_in(node) == 0) 

			overlap = 0;

		else 

			overlap = max((*inter).size()/(float)nb_neighbors_out(node), (*inter).size()/(float)nb_neighbors_in(node)); 

		foutput << node << ";" << nb_neighbors_out(node) << ";" << nb_neighbors_in(node) << ";" <<  overlap << endl;  

		//delete[] outNeighbors; 
		//delete[] inNeighbors; 
		delete inter;

	}

	foutput.close();

}

void
Graph::display_reverse() {
  for (unsigned int node=0 ; node<nb_nodes ; node++) {
    pair<vector<unsigned int>::iterator, vector<float>::iterator > p = neighbors(node);
    for (unsigned int i=0 ; i<nb_neighbors_out(node) ; i++) {
      if (node>*(p.first+i)) {
	if (weights.size()!=0)
	  cout << *(p.first+i) << " " << node << " " << *(p.second+i) << endl;
	else
	  cout << *(p.first+i) << " " << node << endl;
      }
    }   
  }
}


bool
Graph::check_symmetry() {
  int error=0;
  for (unsigned int node=0 ; node<nb_nodes ; node++) {
    pair<vector<unsigned int>::iterator, vector<float>::iterator > p = neighbors(node);
    for (unsigned int i=0 ; i<nb_neighbors_out(node) ; i++) {
      unsigned int neigh = *(p.first+i);
      float weight = *(p.second+i);
      
      pair<vector<unsigned int>::iterator, vector<float>::iterator > p_neigh = neighbors(neigh);
      for (unsigned int j=0 ; j<nb_neighbors_out(neigh) ; j++) {
	unsigned int neigh_neigh = *(p_neigh.first+j);
	float neigh_weight = *(p_neigh.second+j);

	if (node==neigh_neigh && weight!=neigh_weight) {
	  cout << node << " " << neigh << " " << weight << " " << neigh_weight << endl;
	  if (error++==10)
	    exit(0);
	}
      }
    }
  }
  return (error==0);
}


void
Graph::display_binary(char *outfile) {
  ofstream foutput;
  foutput.open(outfile ,fstream::out | fstream::binary);

  foutput.write((char *)(&nb_nodes),4);
  foutput.write((char *)(&degrees_out[0]),4*nb_nodes);
  foutput.write((char *)(&links[0]),4*nb_links_out);
  foutput.write((char *)(&degrees_in[0]),4*nb_nodes);
  foutput.write((char *)(&links_in[0]),4*nb_links_in);
}
<<<<<<< .mine

void
Graph::p_scc(int s, int p, set<int>& composante) {
	
	stack<pair<int,int> > astack;
	stack<int> vpath, vpath_temp;
	int w, z, temp;
	pair<int, int> a;
	int c =(p + 2) /2;
	composante.insert(s);
	vpath.push(s);
	int debut, fin;
	if (s == 0)
		debut =0;
	else
		debut = degrees_out[s -1];
	fin = degrees_out[s];

	for (int i = debut; i < fin; i++) {
		astack.push(make_pair(s, links[i]));
	}
	while (!astack.empty()) {
		a = astack.top();

		astack.pop();
		w = vpath.top();
		//if (a.first != w) {
			while (a.first != w) {
				vpath.pop();
				w=vpath.top();				
			}
	//		vpath.push(w);
	//	}
		z = a.second;
		if (z == s) {
			while (!vpath.empty()) {
				temp = vpath.top();
				vpath_temp.push(temp);
				composante.insert(temp);
				vpath.pop();
			}
			while (!vpath_temp.empty()) {
				temp = vpath_temp.top();
				vpath.push(temp);  
				vpath_temp.pop();
			}
		}
		else {
			if (vpath.size() < c) {
				if (z == 0)
					debut =0;
				else
					debut = degrees_out[z -1];
				fin = degrees_out[z];
				for (int i= debut; i < fin; i++) {
					astack.push(make_pair(z,links[i]));
				}
				vpath.push(z);
			}
		}
	}
}

void
Graph::p_scc_all(int p, string filename) {
	ofstream foutput;
	foutput.open(filename.c_str() ,fstream::out);
	set<int> composante;
	set<int>::iterator it;
	for (int i=0; i < nb_nodes; i++) {
		foutput << "source : " << i << " ";
		p_scc(i, p, composante);
		for (it = composante.begin(); it != composante.end(); it++) 
			foutput << (*it) << " ";
		foutput << endl;
		composante.clear();
	}
	foutput.close();
}
=======

void
Graph::p_scc(int s, int p, set<int>& composante) {
	
	stack<pair<int,int> > astack;
	stack<int> vpath, vpath_temp;
	int w, z, temp;
	pair<int, int> a;
	int c =(p + 2) /2;
	composante.insert(s);
	vpath.push(s);
	int debut, fin;
	if (s == 0)
		debut =0;
	else
		debut = degrees_out[s -1];
	fin = degrees_out[s];

	for (int i = debut; i < fin; i++) {
		astack.push(make_pair(s, links[i]));
	}
	while (!astack.empty()) {
		a = astack.top();

		astack.pop();
		w = vpath.top();
		//if (a.first != w) {
			while (a.first != w) {
				vpath.pop();
				w=vpath.top();				
			}
	//		vpath.push(w);
	//	}
		z = a.second;
		if (z == s) {
			while (!vpath.empty()) {
				temp = vpath.top();
				vpath_temp.push(temp);
				composante.insert(temp);
				vpath.pop();
			}
			while (!vpath_temp.empty()) {
				temp = vpath_temp.top();
				vpath.push(temp);  
				vpath_temp.pop();
			}
		}
		else {
			if (vpath.size() < c) {
				if (z == 0)
					debut =0;
				else
					debut = degrees_out[z -1];
				fin = degrees_out[z];
				for (int i= debut; i < fin; i++) {
					astack.push(make_pair(z,links[i]));
				}
				vpath.push(z);
			}
		}
	}
}

void
Graph::p_scc_all(int p, string filename) {
	ofstream foutput;
	foutput.open(filename.c_str() ,fstream::out);
	set<int> composante;
	set<int>::iterator it;
	for (int i=0; i < nb_nodes; i++) {
		foutput << "source : " << i << " ";
		p_scc(i, p, composante);
		for (it = composante.begin(); it != composante.end(); it++) 
			foutput << (*it) << " ";
		foutput << endl;
		composante.clear();
	}
	foutput.close();
}
>>>>>>> .r98
